
import graphql.*;
import java.util.*;

public class GraphQLExecutor {

    private final GraphQLClient graphQLClient;

    public GraphQLExecutor(GraphQLClient graphQLClient) {
        this.graphQLClient = graphQLClient;
    }

    public String executeGraphQLQuery(String query, Map<String, Object> variables) {
        Map<String, Object> response = graphQLClient.execute(query, variables);
        return JsonUtils.convertMapToJson(response);
    }

    public static void main(String[] args) {
        GraphQLExecutor executor = new GraphQLExecutor(new GraphQLClient("https://api.example.com/graphql"));

        String query = "query MyQuery { users { id name } }";
        Map<String, Object> variables = new HashMap<>();

        String result = executor.executeGraphQLQuery(query, variables);
        System.out.println(result);
    }
}

class GraphQLClient {

    private final String endpoint;

    public GraphQLClient(String endpoint) {
        this.endpoint = endpoint;
    }

    public Map<String, Object> execute(String query, Map<String, Object> variables) {
        HttpURLConnection connection = null;
        try {
            URL url = new URL(endpoint);
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setRequestProperty("Accept", "application/json");

            String body = "{\"query\": \"" + query + "\", \"variables\": " + JsonUtils.convertMapToJson(variables) + "}";

            connection.setDoOutput(true);
            DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream());
            outputStream.writeBytes(body);
            outputStream.flush();
            outputStream.close();

            int responseCode = connection.getResponseCode();
            if (responseCode != 200) {
                throw new RuntimeException("Failed to execute GraphQL query: " + responseCode);
            }

            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String response = reader.readLine();
            reader.close();

            ObjectMapper mapper = new ObjectMapper();
            Map<String, Object> parsedResponse = mapper.readValue(response, Map.class);
            return parsedResponse;
        } catch (Exception e) {
            throw new RuntimeException(e);
        } finally {
            if (connection != null) {
                connection.disconnect();
            }
        }
    }
}

class JsonUtils {

    public static String convertMapToJson(Map<String, Object> map) {
        ObjectMapper mapper = new ObjectMapper();
        String json = mapper.writeValueAsString(map);
        return json;
    }
}
