package main

import (
	"encoding/json"
	"fmt"
	"os"
	"sort"
)

// sortNestedJSON recursively sorts nested arrays within a JSON structure.
func sortNestedJSON(data interface{}) interface{} {
	switch value := data.(type) {
	case map[string]interface{}: // If it's a map (JSON object)
		for key, val := range value {
			value[key] = sortNestedJSON(val)
		}
	case []interface{}: // If it's an array (JSON array)
		for i, val := range value {
			value[i] = sortNestedJSON(val)
		}
		// Sort the array itself if possible
		if sortable, ok := value.(sortableSlice); ok {
			sort.Sort(sortable)
		}

	}
	return data
}

// Create an interface for types that can be sorted
type sortableSlice []interface{}

func (s sortableSlice) Len() int           { return len(s) }
func (s sortableSlice) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }
func (s sortableSlice) Less(i, j int) bool {
	// String comparison logic
	str1, ok1 := s[i].(string)
	str2, ok2 := s[j].(string)
	if ok1 && ok2 {
		return str1 < str2 // Sort in ascending order
	}
	return false // Handle potential type mismatches if needed
}

func main() {
	// Load JSON from file
	jsonFile, err := os.Open("your_json_file.json")
	if err != nil {
		fmt.Println(err)
		return
	}
	defer jsonFile.Close()

	var jsonData interface{}
	decoder := json.NewDecoder(jsonFile)
	err = decoder.Decode(&jsonData)
	if err != nil {
		fmt.Println(err)
		return
	}

	// Sort the nested JSON
	sortedData := sortNestedJSON(jsonData)

	// Marshal back to JSON and write to a new file
	sortedJSON, _ := json.MarshalIndent(sortedData, "", "  ")
	err = os.WriteFile("sorted_json_file.json", sortedJSON, 0644)
	if err != nil {
		fmt.Println(err)
		return
	}

	fmt.Println("Sorting complete!")
}
